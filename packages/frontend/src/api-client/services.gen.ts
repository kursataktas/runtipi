// This file is auto-generated by @hey-api/openapi-ts

import { type Options, createClient, createConfig } from '@hey-api/client-fetch';
import type {
  AcknowledgeWelcomeData,
  AcknowledgeWelcomeError,
  AcknowledgeWelcomeResponse,
  AppContextError,
  AppContextResponse,
  BackupAppData,
  BackupAppError,
  BackupAppResponse,
  CancelResetPasswordError,
  CancelResetPasswordResponse,
  ChangePasswordData,
  ChangePasswordError,
  ChangePasswordResponse,
  ChangeUsernameData,
  ChangeUsernameError,
  ChangeUsernameResponse,
  CheckResetPasswordRequestError,
  CheckResetPasswordRequestResponse,
  CreateLinkData,
  CreateLinkError,
  CreateLinkResponse,
  DeleteAppBackupData,
  DeleteAppBackupError,
  DeleteAppBackupResponse,
  DeleteLinkData,
  DeleteLinkError,
  DeleteLinkResponse,
  DisableTotpData,
  DisableTotpError,
  DisableTotpResponse,
  EditLinkData,
  EditLinkError,
  EditLinkResponse,
  GetAppBackupsData,
  GetAppBackupsError,
  GetAppBackupsResponse,
  GetAppDetailsData,
  GetAppDetailsError,
  GetAppDetailsResponse,
  GetGuestAppsError,
  GetGuestAppsResponse,
  GetImageData,
  GetImageError,
  GetImageResponse,
  GetInstalledAppsError,
  GetInstalledAppsResponse,
  GetLinksError,
  GetLinksResponse,
  GetTotpUriData,
  GetTotpUriError,
  GetTotpUriResponse,
  GetTranslationData,
  GetTranslationError,
  GetTranslationResponse,
  InstallAppData,
  InstallAppError,
  InstallAppResponse,
  LoginData,
  LoginError,
  LoginResponse,
  LogoutError,
  LogoutResponse,
  PullRepo,
  PullRepoError,
  PullRepoResponse,
  RegisterData,
  RegisterError,
  RegisterResponse,
  ResetAppData,
  ResetAppError,
  ResetAppResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  RestartAppData,
  RestartAppError,
  RestartAppResponse,
  RestoreAppBackupData,
  RestoreAppBackupError,
  RestoreAppBackupResponse,
  SearchAppsData,
  SearchAppsError,
  SearchAppsResponse,
  SetupTotpData,
  SetupTotpError,
  SetupTotpResponse,
  StartAppData,
  StartAppError,
  StartAppResponse,
  StopAppData,
  StopAppError,
  StopAppResponse,
  SystemLoadError,
  SystemLoadResponse,
  UninstallAppData,
  UninstallAppError,
  UninstallAppResponse,
  UpdateUserSettingsData,
  UpdateUserSettingsError,
  UpdateUserSettingsResponse,
  UserContextError,
  UserContextResponse,
  VerifyTotpData,
  VerifyTotpError,
  VerifyTotpResponse,
} from './types.gen';

export const client = createClient(createConfig());

export const userContext = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<UserContextResponse, UserContextError, ThrowOnError>({
    ...options,
    url: '/api/user-context',
  });
};

export const appContext = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<AppContextResponse, AppContextError, ThrowOnError>({
    ...options,
    url: '/api/app-context',
  });
};

export const updateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSettingsData, ThrowOnError>) => {
  return (options?.client ?? client).patch<UpdateUserSettingsResponse, UpdateUserSettingsError, ThrowOnError>({
    ...options,
    url: '/api/user-settings',
  });
};

export const acknowledgeWelcome = <ThrowOnError extends boolean = false>(options: Options<AcknowledgeWelcomeData, ThrowOnError>) => {
  return (options?.client ?? client).patch<AcknowledgeWelcomeResponse, AcknowledgeWelcomeError, ThrowOnError>({
    ...options,
    url: '/api/acknowledge-welcome',
  });
};

export const systemLoad = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<SystemLoadResponse, SystemLoadError, ThrowOnError>({
    ...options,
    url: '/api/system/load',
  });
};

export const getTranslation = <ThrowOnError extends boolean = false>(options: Options<GetTranslationData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetTranslationResponse, GetTranslationError, ThrowOnError>({
    ...options,
    url: '/api/i18n/locales/{lng}/{ns}.json',
  });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
  return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
    ...options,
    url: '/api/auth/login',
  });
};

export const verifyTotp = <ThrowOnError extends boolean = false>(options: Options<VerifyTotpData, ThrowOnError>) => {
  return (options?.client ?? client).post<VerifyTotpResponse, VerifyTotpError, ThrowOnError>({
    ...options,
    url: '/api/auth/verify-totp',
  });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
  return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
    ...options,
    url: '/api/auth/register',
  });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: '/api/auth/logout',
  });
};

export const changeUsername = <ThrowOnError extends boolean = false>(options: Options<ChangeUsernameData, ThrowOnError>) => {
  return (options?.client ?? client).patch<ChangeUsernameResponse, ChangeUsernameError, ThrowOnError>({
    ...options,
    url: '/api/auth/username',
  });
};

export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
  return (options?.client ?? client).patch<ChangePasswordResponse, ChangePasswordError, ThrowOnError>({
    ...options,
    url: '/api/auth/password',
  });
};

export const getTotpUri = <ThrowOnError extends boolean = false>(options: Options<GetTotpUriData, ThrowOnError>) => {
  return (options?.client ?? client).patch<GetTotpUriResponse, GetTotpUriError, ThrowOnError>({
    ...options,
    url: '/api/auth/totp/get-uri',
  });
};

export const setupTotp = <ThrowOnError extends boolean = false>(options: Options<SetupTotpData, ThrowOnError>) => {
  return (options?.client ?? client).patch<SetupTotpResponse, SetupTotpError, ThrowOnError>({
    ...options,
    url: '/api/auth/totp/setup',
  });
};

export const disableTotp = <ThrowOnError extends boolean = false>(options: Options<DisableTotpData, ThrowOnError>) => {
  return (options?.client ?? client).patch<DisableTotpResponse, DisableTotpError, ThrowOnError>({
    ...options,
    url: '/api/auth/totp/disable',
  });
};

export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
  return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
    ...options,
    url: '/api/auth/reset-password',
  });
};

export const cancelResetPassword = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).delete<CancelResetPasswordResponse, CancelResetPasswordError, ThrowOnError>({
    ...options,
    url: '/api/auth/reset-password',
  });
};

export const checkResetPasswordRequest = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<CheckResetPasswordRequestResponse, CheckResetPasswordRequestError, ThrowOnError>({
    ...options,
    url: '/api/auth/reset-password',
  });
};

export const getInstalledApps = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<GetInstalledAppsResponse, GetInstalledAppsError, ThrowOnError>({
    ...options,
    url: '/api/apps/installed',
  });
};

export const getGuestApps = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<GetGuestAppsResponse, GetGuestAppsError, ThrowOnError>({
    ...options,
    url: '/api/apps/guest',
  });
};

export const searchApps = <ThrowOnError extends boolean = false>(options?: Options<SearchAppsData, ThrowOnError>) => {
  return (options?.client ?? client).get<SearchAppsResponse, SearchAppsError, ThrowOnError>({
    ...options,
    url: '/api/apps/search',
  });
};

export const getAppDetails = <ThrowOnError extends boolean = false>(options: Options<GetAppDetailsData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetAppDetailsResponse, GetAppDetailsError, ThrowOnError>({
    ...options,
    url: '/api/apps/{id}',
  });
};

export const getImage = <ThrowOnError extends boolean = false>(options: Options<GetImageData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetImageResponse, GetImageError, ThrowOnError>({
    ...options,
    url: '/api/apps/{id}/image',
  });
};

export const installApp = <ThrowOnError extends boolean = false>(options: Options<InstallAppData, ThrowOnError>) => {
  return (options?.client ?? client).post<InstallAppResponse, InstallAppError, ThrowOnError>({
    ...options,
    url: '/api/app-lifecycle/{id}/install',
  });
};

export const startApp = <ThrowOnError extends boolean = false>(options: Options<StartAppData, ThrowOnError>) => {
  return (options?.client ?? client).post<StartAppResponse, StartAppError, ThrowOnError>({
    ...options,
    url: '/api/app-lifecycle/{id}/start',
  });
};

export const stopApp = <ThrowOnError extends boolean = false>(options: Options<StopAppData, ThrowOnError>) => {
  return (options?.client ?? client).post<StopAppResponse, StopAppError, ThrowOnError>({
    ...options,
    url: '/api/app-lifecycle/{id}/stop',
  });
};

export const restartApp = <ThrowOnError extends boolean = false>(options: Options<RestartAppData, ThrowOnError>) => {
  return (options?.client ?? client).post<RestartAppResponse, RestartAppError, ThrowOnError>({
    ...options,
    url: '/api/app-lifecycle/{id}/restart',
  });
};

export const uninstallApp = <ThrowOnError extends boolean = false>(options: Options<UninstallAppData, ThrowOnError>) => {
  return (options?.client ?? client).delete<UninstallAppResponse, UninstallAppError, ThrowOnError>({
    ...options,
    url: '/api/app-lifecycle/{id}/uninstall',
  });
};

export const resetApp = <ThrowOnError extends boolean = false>(options: Options<ResetAppData, ThrowOnError>) => {
  return (options?.client ?? client).post<ResetAppResponse, ResetAppError, ThrowOnError>({
    ...options,
    url: '/api/app-lifecycle/{id}/reset',
  });
};

export const backupApp = <ThrowOnError extends boolean = false>(options: Options<BackupAppData, ThrowOnError>) => {
  return (options?.client ?? client).post<BackupAppResponse, BackupAppError, ThrowOnError>({
    ...options,
    url: '/api/backups/{appid}/backup',
  });
};

export const restoreAppBackup = <ThrowOnError extends boolean = false>(options: Options<RestoreAppBackupData, ThrowOnError>) => {
  return (options?.client ?? client).post<RestoreAppBackupResponse, RestoreAppBackupError, ThrowOnError>({
    ...options,
    url: '/api/backups/{appid}/restore',
  });
};

export const getAppBackups = <ThrowOnError extends boolean = false>(options: Options<GetAppBackupsData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetAppBackupsResponse, GetAppBackupsError, ThrowOnError>({
    ...options,
    url: '/api/backups/{id}',
  });
};

export const deleteAppBackup = <ThrowOnError extends boolean = false>(options: Options<DeleteAppBackupData, ThrowOnError>) => {
  return (options?.client ?? client).delete<DeleteAppBackupResponse, DeleteAppBackupError, ThrowOnError>({
    ...options,
    url: '/api/backups/{appid}',
  });
};

export const getLinks = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<GetLinksResponse, GetLinksError, ThrowOnError>({
    ...options,
    url: '/api/links',
  });
};

export const createLink = <ThrowOnError extends boolean = false>(options: Options<CreateLinkData, ThrowOnError>) => {
  return (options?.client ?? client).post<CreateLinkResponse, CreateLinkError, ThrowOnError>({
    ...options,
    url: '/api/links',
  });
};

export const editLink = <ThrowOnError extends boolean = false>(options: Options<EditLinkData, ThrowOnError>) => {
  return (options?.client ?? client).patch<EditLinkResponse, EditLinkError, ThrowOnError>({
    ...options,
    url: '/api/links/{id}',
  });
};

export const deleteLink = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkData, ThrowOnError>) => {
  return (options?.client ?? client).delete<DeleteLinkResponse, DeleteLinkError, ThrowOnError>({
    ...options,
    url: '/api/links/{id}',
  });
};

export const pullRepo = <ThrowOnError extends boolean = false>(options: Options<PullRepo, ThrowOnError>) => {
  return (options?.client ?? client).post<PullRepoResponse, PullRepoError, ThrowOnError>({
    ...options,
    url: '/api/repos/pull',
  });
};
